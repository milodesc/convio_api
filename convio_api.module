<?php

/**
 * Implements hook_permission().
 */
function convio_api_permission() {

  return array(
    'administer convio api settings' => array(
      'title' => t('Administer Convio API Settings'),
      'description' => t('Set up the parameters for using the Convio API.'),
    ),
  );

}

/**
 * Implements hook_menu().
 */
function convio_api_menu() {
  $items = array();
  
  $items['admin/config/system/convio_api_config'] = array(
    'title' => 'Convio API Configuration',
    'description' => 'Manage settings to connect with the Convio API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_api_admin_site_settings'),
    'access arguments' => array('administer convio api settings'),
    'file' => 'include/convio_api.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/convio_api_test'] = array(
    'title' => 'Convio API Connection Test',
    'description' => 'Test the connection to the Convio Site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_api_admin_site_test'),
    'access arguments' => array('administer convio api settings'),
    'file' => 'include/convio_api.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Configure and execute a request to the Convio API
 *
 * @param $api
 *   The name of the subset of Convio API commands that contains this command
 * @param $method
 *   The origin of the Convio API request, "client" or "server". Server requests must be preconfigured on Convio to have access to all Convio API requests withouth authentication.
 * @param $params
 *   The optional and required parameters for this type of API request.
 *
 * @return 
 *   Convio's response to the API request
 */
function convio_api_request($api, $method, $required_params, $optional_params = array()) {
  $convio_api = new ConvioAPI($api, $method, $required_params, $optional_params);
  $response = $convio_api->execute();

  watchdog('convio_api', $response->request);
  $response_decoded = drupal_json_decode($response->data);
  if (!empty($response->error)) {
    if (empty($response_decoded)) {
      // The request never made it to the Convio API
      $error_message = "There was a connection error! Check the API Base URL and Name of Organization fields.";
    }
    else {
      // The Convio API returned and error message
      $error_message = "There was a Convio error: " . $response_decoded['errorResponse']['message'];
    }
    watchdog('convio_api', $error_message, array(), WATCHDOG_ERROR);
    throw new Exception($error_message);
  }

  return $response_decoded;
}

/**
 * Execute an isEmailValid Convio API request. Documentation of this request is available here: http://open.convio.com/api/#constituent_api.isEmailValid_method.html
 *
 * @param $email
 *   The email address to check for validity.
 *
 * @return
 *   TRUE if Convio considers the email address to be valid. FALSE if Convio considers the email address to be invalid.
 */
function convio_api_isEmailValid_request($email, $optional_params = array()) {
  $required_params = array(
    'email' => $email,
    'method' => 'isEmailValid',
  );

  return convio_api_request('constituent', 'server', $required_params, $optional_params);
}

/**
 * Execute a createOrUpdate Convio API request. Documentation of this request is available here: http://open.convio.com/api/#constituent_api.createOrUpdate_method.html
 *
 * @param $email
 *   The email address of the user to create or update.
 *
 * @return
 *   An array containing the constituent ID of the user created or updated and a message.
 */
function convio_api_createOrUpdate_request($email, $optional_params = array()) {
  $required_params = array(
    'email' => $email,
    'method' => 'createOrUpdate',
  );

  $api_response = convio_api_request('constituent', 'server', $required_params, $optional_params);
}